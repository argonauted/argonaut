@precedence {
  exprterm @left,
  exprx @left,
  nmspc @left,
  child @left,
  subset @left,
  funcall @left,
  exp @left,
  sign @right,
  seq @left,
  infix @left,
  times @left,
  plus @left,
  comp @left,
  not @left,
  and @left,
  or @left,
  frmla @left,
  rassign @left,
  lassign @right,
  eqassign @right,
  if,
  else @right,
  repeat,
  while,
  for,
  in,
  funbody,
  paren,
  block,
  help,
  label
}

@skip { spaces | Comment }

expression {
  literal | Identifier | 
  UnaryExpr | BinaryExpr | AssignExpr |
  DollarExpr | NamespaceExpr | SlotExpr | BrckExpr | DblBrckExpr |
  ParenExpr  | Block |
  IfExpr | RepeatExpr | WhileExpr | ForExpr |
  StdCall | FuncDef
}

literal { 
  Character | Numeric | Integer | Logical | Complex | SpecialValue
}

Identifier { 
  simpleName | backtickName   
}

cellPattern { (expression  ";" !exprterm)* expression ";"? !exprterm }

EmptyCell[group="cell"] { () }
emptyLine { EmptyCell newline }
Cell[group="cell"] { cellPattern }
line { Cell newline emptyLine* !exprterm }
EndCell[group="cell"] { cellPattern eof}
EmptyEnd[group="cell"] { eof }

BEmptyCell[group="cell"] { () }
bEmptyLine { BEmptyCell newline }
BCell[group="cell"] { cellPattern }
bLine { BCell newline bEmptyLine* !exprterm }
BEndCell[group="cell"] { cellPattern closeBrace}
BEmptyEnd[group="cell"] { closeBrace }
bStart { openBrace ( bEmptyLine | bLine) }
BEmptyBlock[group="cell"] { openBrace closeBrace }

@top Script { emptyLine* line* ( EndCell | EmptyEnd )  }

Block { bStart bEmptyLine* bLine* ( BEndCell | BEmptyEnd ) | BEmptyBlock | openBrace BEndCell }

ParenExpr { 
  openParen newline* expression newline* closeParen
}


UnaryExpr {
  !sign ArithOp< "+" | "-" > newline* expression | 
  !not LogicOp< "!" > newline* expression |
  !frmla GenOp< "~" > newline* expression  | 
  !help GenOp< "?" > newline* expression
}

BinaryExpr {    
    expression !seq GenOp< ":" > newline* expression |
    expression !times ArithOp< "*" | "/" > newline* expression |
    expression !plus ArithOp< "+" | "-" > newline* expression |
    expression !exp ArithOp< "^" > newline* expression |
    expression !infix GenOp<infix> newline* expression |
    expression !comp CompOp< "<" | ">" | ">=" | "<=" | "==" | "!=" > newline* expression |
    expression !and LogicOp< "&" | "&&" > newline* expression |
    expression !or LogicOp< "|" | "||" > newline* expression |
    expression !frmla GenOp< "~" > newline* expression
}

ArithOp<op> { op }
CompOp<op> { op }
LogicOp<op> { op }
GenOp<op> { op }

AssignExpr {
  expression !lassign ( "<-" | "<<-" ) newline* expression |
  expression !rassign ( "->" | "->>" ) newline* expression |
  expression !eqassign equalSign newline* expression
}

DollarExpr { expression !child "$" newline* ( Identifier | Character ) }
NamespaceExpr { Identifier !nmspc ( "::" | ":::" ) newline* Identifier }
SlotExpr { expression !child "@" newline* ( Identifier | Character ) }
BrckExpr { expression newline* !subset openBrack newline* SubsetArgList closeBrack }
DblBrckExpr { expression newline* !subset openDBrack newline* SubsetArgList closeDBrack }

IfExpr { ifKwd newline* openParen newline* expression newline* closeParen newline* expression ifEnding }

ifEnding { 
  ~ifelse ()
  |
  ~ifelse newline* elseKwd newline* !else expression  
}

RepeatExpr { repeatKwd newline* !repeat expression }
WhileExpr { whileKwd newline* openParen newline* expression newline* closeParen newline* !while expression }
ForExpr { forKwd newline* openParen newline* Identifier newline* inKwd newline* !in expression closeParen newline* !for expression }

EmptyArg { () }
plainArgValue[@name="ArgValue"] { expression ~args newline*  }
labeledArgValue[@name="ArgValue",@dynamicPrecedence=1] { Identifier ~args newline* !label equalSign newline* expression newline* }
argValue { EmptyArg | plainArgValue | labeledArgValue }
ArgList { 
  argValue ( "," newline* argValue )*
}
SubsetEmptyArg { () }
SubsetArgValue { expression ~args newline*  }
subsetArgValue { SubsetEmptyArg | SubsetArgValue } 
SubsetArgList {
  subsetArgValue ( "," newline* subsetArgValue )*
}

StdCall { expression newline* !funcall openParen newline* ArgList closeParen }

commaSep<x> { "" | x ( "," newline* x)* }

ParamValue { Identifier newline* ( equalSign newline* expression newline* )? }
ParamList { commaSep<ParamValue>  }
FuncDef { functionKwd newline* openParen newline* ParamList closeParen newline* !funbody expression }



kw<term> { @specialize[@name={term}]<simpleName, term> }

ifKwd { kw<"if"> }
elseKwd { kw<"else"> }
repeatKwd { kw<"repeat"> }
whileKwd { kw<"while"> }
functionKwd { kw<"function"> }
forKwd { kw<"for"> }
inKwd { kw<"in"> }

infix[@name="INFIX"] { infix0 | infix1 | infix2 | infix3 | infix4 | infix5 | infix6 | infix7| infix8 | infix9 }

@tokens {
  spaces  { $[\u0009 \u000b\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]+ }
  newline  { $[\r\n\u2028\u2029] }
  eof { @eof }

  identifierChar { @asciiLetter }

  Character {
    '"' ( ![\\\n"] | '\\' '"' )*  '"' |
    "'" ( ![\\\n'] | "\\" "'" )*  "'"
  }

  Logical { "TRUE" | "FALSE" }

  SpecialValue { "NULL" | "NA" | "NA_integer_" | "NA_real_" | "NA_complex_" | "NA_Character_" | "Inf" | "NaN" }

  number {
    ( ( (@digit+ ( "." @digit* )? ) | ( "." @digit+ ) )  ( ("e" | "E") ("+" | "-")? @digit+ )? ) |
    ( ( "0x" | "0X" )( @digit | $[a-fA-F] )+ ( "."? ( @digit | $[a-fA-F] )* ("p" | "P") ("+" | "-")? @digit+ )? )
  }

  Numeric { number }

  Integer { number "L" }

  Complex { number "i" }

  simpleName {
    ( identifierChar ) ( identifierChar | @digit | "." | "_" )*  | 
    ( "." ) ( ( identifierChar | "." | "_" ) ( identifierChar | @digit | "." | "_" )* )?
  }

  backtickName { "`" ![\n]* "`" }

  infix0 { "%%" }
  infix1 { "%" ![%] "%" }
  infix2 { "%" ![%] ![%] "%" }
  infix3 { "%" ![%] ![%] ![%]  "%" }
  infix4 { "%" ![%] ![%] ![%] ![%] "%" }
  infix5 { "%" ![%] ![%] ![%] ![%] ![%] "%" }
  infix6 { "%" ![%] ![%] ![%] ![%] ![%] ![%] "%" }
  infix7 { "%" ![%] ![%] ![%] ![%] ![%] ![%] ![%] "%" }
  infix8 { "%" ![%] ![%] ![%] ![%] ![%] ![%] ![%] ![%] "%" }
  infix9 { "%" ![%] ![%] ![%] ![%] ![%] ![%] ![%] ![%] ![%] "%" }

  @precedence {
    infix0
    infix1,
    infix2,
    infix3,
    infix4,
    infix5,
    infix6,
    infix7,
    infix8,
    infix9,
    backtickName,
    Logical,
    SpecialValue,
    Character,
    Complex,
    Integer,
    Numeric,
    simpleName
  }

  Comment { "#" ![\n]* }

  openBrace { "{" }
  closeBrace { "}" }
  openBrack[@name="["] { "[" }
  closeBrack[@name="]"] { "]" }
  openDBrack[@name="[[" ] { "[[" }
  closeDBrack[@name="]]"] { "]]" }
  openParen[@name="("] { "(" }
  closeParen[@name=")"] { ")" }

  equalSign[@name="="] { "=" }

  "*" "/" "+" "-" "^"
  "<" ">" ">=" "<=" "==" "!="
  "!" "&" "&&" "|" "||"
  "<<-" "<-" "->>" "->" 
  ":" "::" ":::" "$" "@" "~" "?"

  @precedence {
    openDBrack
    openBrack
    closeDBrack
    closeBrack
  }

  @precedence {
    ":::" "::" ":"
  }

  @precedence {
    "<<-" "<-" "<=" "<" "-" 
  }

  @precedence {
   "->>" "->" ">=" ">" "-"
  }

  @precedence {
    "==" ">=" "<=" "!=" equalSign
  }

  @precedence {
    "&&" "&"
  }

  @precedence {
    "||" "|"
  }

}


